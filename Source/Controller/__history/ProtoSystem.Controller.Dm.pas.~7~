unit ProtoSystem.Controller.Dm;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.Stan.Param,
  FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.VCLUI.Wait,
  FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.Comp.UI, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, System.IOUtils, System.Variants;

type
  TDM = class(TDataModule)
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDPhysSQLiteDriverLink1: TFDPhysSQLiteDriverLink;
    conexao: TFDConnection;
    QueryPRODUTO: TFDQuery;
    QueryCLIENTE: TFDQuery;
    QueryFORNECEDOR: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
    function GetTables: TDataSet;
    function GetTableInfo(const ATable: string): TDataSet;
    procedure CreateDB;
    procedure UpdateDB;
  public
    { Public declarations }
  end;

var
  Dm: TDM;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}

procedure TDM.DataModuleCreate(Sender: TObject);
var
  LPath: string;
  LFile: TextFile;
begin
{$IFDEF MSWINDOWS}
  LPath := System.SysUtils.GetCurrentDir;
{$ELSE}
  LPath := System.IOUtils.TPath.GetDocumentsPath;
{$ENDIF}
  LPath := System.IOUtils.TPath.Combine(LPath, 'Database');
  ForceDirectories(LPath);
  LPath := System.IOUtils.TPath.Combine(LPath, 'Dados.db');
  if not(FileExists(LPath)) then
  begin
    try
      AssignFile(LFile, LPath);
      Rewrite(LFile);
    finally
      CloseFile(LFile);
    end;
  end;
  conexao.Params.Values['Database'] := LPath;
  CreateDB;
end;

procedure TDM.CreateDB;
var
  LPath: string;
  LFile: TextFile;
begin
{$IFDEF MSWINDOWS}
  LPath := System.SysUtils.GetCurrentDir;
{$ELSE}
  LPath := System.IOUtils.TPath.GetDocumentsPath;
{$ENDIF}
  LPath := System.IOUtils.TPath.Combine(LPath, 'Database');
  ForceDirectories(LPath);
  LPath := System.IOUtils.TPath.Combine(LPath, 'Dados.db');
  if not(FileExists(LPath)) then
  begin
    try
      AssignFile(LFile, LPath);
      Rewrite(LFile);
    finally
      CloseFile(LFile);
    end;
  end;
  conexao.Params.Values['Database'] := LPath;
end;

procedure TDM.UpdateDB;
var
  LDSTables: TDataSet;
  LDSTableInfo: TDataSet;

  LTable: string;
  LField: string;
  LSqlCreatePerson: string;
begin
  try
    LDSTables := nil;
    LDSTableInfo := nil;

    LDSTables := GetTables;

// Criacao
    LSqlCreatePerson :=
      'CREATE TABLE Person (' + #13 +
      'Id INTEGER NOT NULL PRIMARY KEY,' + #13 +
      'FirstName VARCHAR(50) NOT NULL,' + #13 +
      'Email VARCHAR(100),' + #13 +
      'Birthday DATE' + #13 +
      ');'
      ;
    if not LDSTables.Locate('name', 'Person', []) then
    begin
      conexao.ExecSQL(LSqlCreatePerson);
    end;

// Atualizacao
    begin
      LTable := 'Person';
      LDSTableInfo := GetTableInfo(LTable);

      LField := 'Email';
      if not(LDSTableInfo.Locate('name', LField, [])) then
        conexao.ExecSQL('alter table ' + LTable + ' add column ' + LField + ' VARCHAR(100)');

      if (LDSTableInfo.Locate('name;pk', VarArrayOf(['Id', '0']), [])) then
      begin
        conexao.ExecSQL('PRAGMA foreign_keys = OFF;');
        conexao.ExecSQL('ALTER TABLE ' + LTable + ' RENAME TO ' +  LTable + '2;');
        conexao.ExecSQL(LSqlCreatePerson);
        conexao.ExecSQL(
          'insert into ' + LTable + #13 +
          'select' + #13 +
          'Id,' + #13 +
          'FirstName,' + #13 +
          'Email,' + #13 +
          'Birthday' + #13 +
          'from ' + LTable + '2'
          );
        conexao.ExecSQL('DROP TABLE ' + LTable + '2;');
        conexao.ExecSQL('PRAGMA foreign_keys = ON;');
      end;
    end;
  finally
    FreeAndNil(LDSTables);
  end;
end;

function TDM.GetTableInfo(const ATable: string): TDataSet;
begin
  try
    Result := TFDQuery.Create(nil);
    TFDQuery(Result).Connection := conexao;
    TFDQuery(Result).SQL.Add('PRAGMA table_info("' + ATable + '")');
    TFDQuery(Result).Open;
  except
    FreeAndNil(Result);
    raise ;
  end;
end;

function TDM.GetTables: TDataSet;
begin
  try
    Result := TFDQuery.Create(nil);
    TFDQuery(Result).Connection := conexao;
    TFDQuery(Result).SQL.Add('select name from sqlite_master where type="table"');
    TFDQuery(Result).Open;
  except
    FreeAndNil(Result);
    raise ;
  end;
end;

end.
